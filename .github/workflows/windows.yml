name: Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    # https://github.com/marketplace/actions/enable-developer-command-prompt
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: 'amd64'
    # https://github.com/marketplace/actions/set-up-nasm
    - uses: ilammy/setup-nasm@v1
      with:
        version: '2.15.05'
    # https://github.com/marketplace/actions/setup-perl-environment
    - uses: shogo82148/actions-setup-perl@v1
      with:
        perl-version: '5.34'

    - name: Install zlib
      run: |
        git clone --branch "v1.2.12" https://github.com/madler/zlib
        cmake -B zlib/_b -S zlib -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build zlib/_b --config ${{env.BUILD_TYPE}} --target install          

    - name:  Installing OpenSSL
      shell: powershell
      run: |
        wget https://www.openssl.org/source/openssl-3.0.5.tar.gz -OutFile openssl-3.0.5.tar.gz
        tar -xzf .\openssl-3.0.5.tar.gz
        cd openssl-3.0.5
        perl Configure
        nmake
        #nmake test
        nmake install        
        
    - name: Install SFML
      run: |
        git clone --branch 2.5.x https://github.com/SFML/SFML.git
        cmake -B SFML/_b -S SFML -DBUILD_SHARED_LIBS=false -DSFML_USE_STATIC_STD_LIBS=true -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build SFML/_b --config ${{env.BUILD_TYPE}} --target install

    - name: Install TGUI
      run: |
        git clone -b "0.10" https://github.com/texus/TGUI.git
        cmake -B TGUI/_b -S TGUI -DTGUI_BACKEND=SFML_GRAPHICS -DTGUI_SHARED_LIBS=false -DTGUI_USE_STATIC_STD_LIBS=true -DTGUI_BUILD_GUI_BUILDER=false -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build TGUI/_b --config ${{env.BUILD_TYPE}} --target install        
    
    - name: Add Submodules
      run: git submodule update --init --recursive        

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
