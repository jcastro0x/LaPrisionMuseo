@startuml

class Program
{
    - engine : Engine
    + {static} main()
}

class Engine
{
    - network : INetwork
    - binaryReader : Packager
    - cursor : Cursor
    - scene : Scene
    - window : RenderWindow
    - clock : clock

    + run()
}

class Configuration
{
    {static} musicVolumen : float
    {static} sfxVolumen : float
}

class SceneManager
{
    - scenes : map<name,ptr*>
    + createScene(name) : Scene
}

class Scene
{
    - nodes : SceneNode[]
    __
    + init()
    + destroy()
    + tick(deltaTime)
    __
    + {static} loadScene(data)
}

class SceneNode
{
    - nodes : ref SceneNode[]
    + name : string
    __
    # virtual init() = 0
    # virtual destroy() = 0
    # virtual tick(deltaTime) = 0
    __
    # getSceneNodes() : SceneNode[]
}

class RoomSceneNode
{
    - name : string
    - background : QuadAspectRatio
    - soundPlayer : Sound
    - music : SoundBuffer
    - sfx : SoundBuffer[]
    - cameras : RoomCamera[]
}

class RoomCamera
{
    + texture : Texture
    + mask : Texture
    + anims : BackgroundAnim[]
    + notes : RoomNote[]
}

class RoomNote
{
    owner : string
    avatar : Image
    content : string
    icon : Texture
    position : Vec2u
}

class BackgroundAnim
{
    texture : Texture
    sprite : Sprite
    rate : float
    coord : Vec2u
}

class Player
{
    name : string

}

abstract INetwork
{
    + initialize()
    __ConnectionObservers__
    # onConnected()
    # onDisconnected()
    # onError(reason : string)
    # onKicked(reason : string)
    # onLoginStatus(success : bool)
    # onRoomChanged(room)
    __PlayersObservers__
    # onPlayerEnterRoom(player : Player)
    # onPlayerLeaveRoom(player : Player)
    # onPlayerEnterCamera(player : Player, camera : string)
    # onPlayerLeaveCamera(player : Player, camera : string)
    # onPlayersRoomList(players : Player[])
    # onPlayerPosition(player : Player, pos : Vec2u)
    __ChatObservers__
    # onGlobalMessage(message : string)
    # onPlayerMessage(player : Player, message : string)
    # onPrivateMessage(player : Player, message : string)
    __RoomObservers__
    # onRoomMessage(message : string)
    # onSpawnItem(item : RoomItem)
    # onDestroyItem(item : RoomItem)
    __Sends__
    + changeRoom(room)
    + sendMessage(message)
    + takeItem()
}

class SocketIONetwork
{
    - socketClient : Socket.io
}

class DebugNetwork
{
}


'
' Relations
'-----------------------------------------------------------------------------------------------------------------------
INetwork <|-- SocketIONetwork
INetwork <|-- DebugNetwork
INetwork <|-- NullNetwork


SceneNode <|-- RoomSceneNode
SceneNode <|-- LoginScreen

RoomSceneNode *-- RoomCamera
RoomSceneNode *-- QuadAspectRatio

RoomCamera *-- RoomNote
RoomCamera *-- BackgroundAnim

Scene *-- SceneNode

Program *-- Scene
Program *-- INetwork


@enduml